name: Manual Build & Release RS-backend

on:
  workflow_dispatch:   # 手动触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
      fail-fast: false

    steps:
      # 1️⃣ 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ 设置 Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      # 3️⃣ 构建可执行文件
      - name: Build RS-backend
        run: |
          mkdir -p dist
          EXT=""
          if [ "${{ matrix.goos }}" == "windows" ]; then
            EXT=".exe"
          fi
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/RS-backend-${{ matrix.goos }}-${{ matrix.goarch }}$EXT main.go

      # 4️⃣ 上传构建产物（Actions artifact，可选）
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: RS-backend-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 5️⃣ 创建 Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v2
        with:
          tag_name: "manual-release-${{ github.run_number }}"   # 自动生成唯一 tag
          release_name: "RS-backend manual release #${{ github.run_number }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6️⃣ 上传 Release 文件
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
